"""
UI Behavior Tests for U-Ask Chatbot
Tests the user interface behavior and interactions with reliable CAPTCHA/disclaimer handling
"""
import pytest
import logging
import allure
from utils.automation_helpers import AutomationHelpers

logger = logging.getLogger(__name__)


@pytest.mark.ui
@pytest.mark.smoke
class TestChatWidgetLoading:
    """Test chat widget loading behavior"""

    @allure.title("Chat widget loads correctly on desktop")
    @allure.description("Verify chat widget loads and all elements are visible on desktop")
    def test_chat_widget_loads_on_desktop(self, browser):
        """Verify chat widget loads correctly on desktop"""
        logger.info("=== –¢–ï–°–¢: –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–∂–µ—Ç–∞ —á–∞—Ç–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ ===")
        
        context = browser.new_context(viewport={'width': 1920, 'height': 1080})
        page = context.new_page()
        
        # –ù–∞–¥–µ–∂–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
        
        # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–∞—Ç–∞ —Å fallback
        elements = AutomationHelpers.find_chat_elements(page)
        
        assert elements["input_found"], "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert elements["send_found"], "–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert elements["widget_found"], "–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: input={elements['input_found']}, send={elements['send_found']}, widget={elements['widget_found']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA (–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º)
        captcha_info = AutomationHelpers.check_for_captcha(page)
        if captcha_info["captcha_detected"]:
            logger.warning(f"üîç CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞: {captcha_info}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()

    @pytest.mark.mobile
    @allure.title("Chat widget loads correctly on mobile")  
    def test_mobile_simulation(self, browser):
        """Verify chat widget loads correctly on mobile"""
        logger.info("=== –¢–ï–°–¢: –ò–º–∏—Ç–∞—Ü–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞ ===")
        
        # –ú–æ–±–∏–ª—å–Ω—ã–π viewport
        context = browser.new_context(viewport={'width': 375, 'height': 667})
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–ú–æ–±–∏–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        
        assert elements["input_found"], "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        assert elements["send_found"], "–ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        assert elements["widget_found"], "–ú–æ–±–∏–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: input={elements['input_found']}, send={elements['send_found']}, widget={elements['widget_found']}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –º–æ–±–∏–ª—å–Ω–æ–π –∏–º–∏—Ç–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()


@pytest.mark.ui
class TestMessageSending:
    """Test message sending functionality"""

    @allure.title("User can type message in input box")
    def test_user_can_type_message(self, browser):
        """Verify user can type a message in input box"""
        logger.info("=== –¢–ï–°–¢: –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        assert elements["input_found"], "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        test_message = "Hello, how can I apply for a visa?"
        
        # –ù–∞–¥–µ–∂–Ω—ã–π –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        typing_success = AutomationHelpers.type_message_reliably(page, test_message, elements["input_box"])
        assert typing_success, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        
        logger.info(f"–í–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        logger.info("‚úÖ –¢–µ—Å—Ç –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()

    @allure.title("Send button interaction works correctly")
    def test_send_button_interaction(self, browser):
        """Verify send button can be clicked"""
        logger.info("=== –¢–ï–°–¢: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
        captcha_before = AutomationHelpers.check_for_captcha(page)
        if captcha_before["captcha_detected"]:
            logger.warning(f"üîç CAPTCHA –Ω–∞–π–¥–µ–Ω–∞: {captcha_before}")
        
        # –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
        logger.info("–ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏...")
        send_success = AutomationHelpers.click_send_button_reliably(page, elements["send_button"])
        assert send_success, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CAPTCHA –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏  
        captcha_after = AutomationHelpers.check_for_captcha(page)
        if captcha_after["captcha_detected"]:
            logger.warning("‚ö†Ô∏è CAPTCHA –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ - —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()


@pytest.mark.ui
class TestUIResponsiveness:
    """Test UI responsiveness and behavior"""

    @allure.title("Page elements are visible and accessible")
    def test_page_elements_are_visible(self, browser):
        """Verify all key page elements are visible"""
        logger.info("=== –¢–ï–°–¢: –í–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        
        assert elements["input_found"], "–ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –≤–∏–¥–Ω–æ"
        assert elements["send_found"], "–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –≤–∏–¥–Ω–∞"
        assert elements["widget_found"], "–í–∏–¥–∂–µ—Ç —á–∞—Ç–∞ –Ω–µ –≤–∏–¥–µ–Ω"
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: input={elements['input_found']}, send={elements['send_found']}, widget={elements['widget_found']}")
        logger.info("‚úÖ –¢–µ—Å—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()

    @allure.title("Language and text direction detection")
    def test_language_and_direction_detection(self, browser):
        """Test language and text direction"""
        logger.info("=== –¢–ï–°–¢: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —è–∑—ã–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        try:
            lang = page.locator("html").get_attribute("lang") or "en"
            dir_attr = page.locator("html").get_attribute("dir") or "ltr"
            
            logger.info(f"–Ø–∑—ã–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {lang}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {dir_attr}")
            
            # –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–µ–º LTR
            if "en" in lang.lower():
                assert dir_attr == "ltr" or dir_attr is None, f"–î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è LTR, –ø–æ–ª—É—á–∏–ª–∏: {dir_attr}"
            
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫/–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {e}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()


@pytest.mark.ui  
class TestErrorHandlingAndEdgeCases:
    """Test error handling and edge cases"""

    @allure.title("Empty message handling")
    def test_empty_message_handling(self, browser):
        """Test how system handles empty messages"""
        logger.info("=== –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info("–ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        try:
            elements["input_box"].fill("")
            send_success = AutomationHelpers.click_send_button_reliably(page, elements["send_button"])
            logger.info(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {send_success}")
        except Exception as e:
            logger.info(f"–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º: {e}")
        
        logger.info("‚úÖ –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—É—Å—Ç—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()

    @allure.title("Page responsiveness under load")
    def test_page_responsiveness_under_load(self, browser):
        """Test page responsiveness under multiple actions"""
        logger.info("=== –¢–ï–°–¢: –û—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π ===")
        
        context = browser.new_context()
        page = context.new_page()
        
        setup_result = AutomationHelpers.setup_page_reliably(page)
        assert setup_result["page_ready"], "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞"
        
        elements = AutomationHelpers.find_chat_elements(page)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        logger.info("–í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è...")
        for i in range(3):
            try:
                elements["input_box"].fill(f"Test message {i}")
                page.wait_for_timeout(500)
                elements["input_box"].clear()
                page.wait_for_timeout(500)
            except Exception as e:
                logger.warning(f"–î–µ–π—Å—Ç–≤–∏–µ {i} –≤—ã–∑–≤–∞–ª–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –æ—Ç–∑—ã–≤—á–∏–≤–æ–π
        final_elements = AutomationHelpers.find_chat_elements(page)
        assert final_elements["input_found"], "–ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—Ç–∞–ª–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏"
        
        logger.info("‚úÖ –¢–µ—Å—Ç –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç–∏ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π –ø—Ä–æ–π–¥–µ–Ω")
        
        context.close()
